{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { transferTimeToString, create_Participants } from './CountdownAPI';\nconst initialState = {\n  countSecs: 0.01,\n  countdownString: '00:00',\n  participants: [],\n  luckyPeople: ''\n}; // export const createParticipant = createAsyncThunk(\n//   'countdown/createParticipant', \n//   async (nums = 1) => {\n//     let result = await createParticipants(nums);\n//     console.log(result)\n//     return result;\n//   }\n// )\n\nexport const countdownSlice = createSlice({\n  name: 'countdown',\n  initialState,\n  reducers: {\n    setCountMins: (state, action) => {\n      state.countSecs = action.payload * 60;\n      state.countdownString = transferTimeToString(state.countSecs);\n    },\n    countdownExcu: state => {\n      if (state.countSecs > 0) {\n        state.countSecs--;\n        state.countdownString = transferTimeToString(state.countSecs);\n      }\n    },\n    createParticipants: (state, action) => {\n      let nums = 0;\n      if (action.payload > 0) nums = action.payload;\n      state.participants = create_Participants(nums);\n    },\n    lotteryDraw: state => {\n      state.luckyPeople = state.participants[Math.floor(Math.random() * state.participants.length)];\n      console.log(state.participants, state.luckyPeople);\n    }\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  countdownExcu,\n  setCountMins,\n  createParticipants,\n  lotteryDraw\n} = countdownSlice.actions;\nexport const countdownString = state => state.countdown.countdownString;\nexport const countdownSecs = state => state.countdown.countSecs;\nexport const participants = state => state.countdown.participants;\nexport const iAmLuckyMan = state => state.countdown.luckyPeople;\nexport default countdownSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","transferTimeToString","create_Participants","initialState","countSecs","countdownString","participants","luckyPeople","countdownSlice","name","reducers","setCountMins","state","action","payload","countdownExcu","createParticipants","nums","lotteryDraw","Math","floor","random","length","console","log","actions","countdown","countdownSecs","iAmLuckyMan","reducer"],"sources":["/Users/tsaoyuyang/Desktop/lottery/src/features/countdown/Countdown.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { transferTimeToString, create_Participants } from './CountdownAPI';\n\nconst initialState = {\n  countSecs: 0.01,\n  countdownString: '00:00',\n  participants: [],\n  luckyPeople : ''\n}\n\n\n// export const createParticipant = createAsyncThunk(\n//   'countdown/createParticipant', \n//   async (nums = 1) => {\n//     let result = await createParticipants(nums);\n//     console.log(result)\n//     return result;\n//   }\n// )\n\nexport const countdownSlice = createSlice({\n  name: 'countdown',\n  initialState,\n  reducers: {\n    setCountMins: (state, action) => {\n      state.countSecs = action.payload * 60;\n      state.countdownString = transferTimeToString(state.countSecs);\n    },\n    countdownExcu: (state) => {\n      if( state.countSecs > 0 ) {\n        state.countSecs --;\n        state.countdownString = transferTimeToString(state.countSecs);\n      }\n    },\n    createParticipants: (state, action) => {\n      let nums = 0;\n      if ( action.payload > 0 ) nums = action.payload;\n      state.participants = create_Participants(nums);\n    },\n    lotteryDraw: (state) => {\n      state.luckyPeople = state.participants[Math.floor(Math.random() * state.participants.length)]\n      console.log(state.participants, state.luckyPeople)\n    }\n  },\n})\n\n// Action creators are generated for each case reducer function\nexport const { countdownExcu, setCountMins, createParticipants, lotteryDraw } = countdownSlice.actions;\n\nexport const countdownString = (state) => state.countdown.countdownString;\n\nexport const countdownSecs = (state) => state.countdown.countSecs;\n\nexport const participants = (state) => state.countdown.participants;\n\nexport const iAmLuckyMan = (state) => state.countdown.luckyPeople;\n\nexport default countdownSlice.reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,oBAAT,EAA+BC,mBAA/B,QAA0D,gBAA1D;AAEA,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE,IADQ;EAEnBC,eAAe,EAAE,OAFE;EAGnBC,YAAY,EAAE,EAHK;EAInBC,WAAW,EAAG;AAJK,CAArB,C,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,cAAc,GAAGR,WAAW,CAAC;EACxCS,IAAI,EAAE,WADkC;EAExCN,YAFwC;EAGxCO,QAAQ,EAAE;IACRC,YAAY,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAC/BD,KAAK,CAACR,SAAN,GAAkBS,MAAM,CAACC,OAAP,GAAiB,EAAnC;MACAF,KAAK,CAACP,eAAN,GAAwBJ,oBAAoB,CAACW,KAAK,CAACR,SAAP,CAA5C;IACD,CAJO;IAKRW,aAAa,EAAGH,KAAD,IAAW;MACxB,IAAIA,KAAK,CAACR,SAAN,GAAkB,CAAtB,EAA0B;QACxBQ,KAAK,CAACR,SAAN;QACAQ,KAAK,CAACP,eAAN,GAAwBJ,oBAAoB,CAACW,KAAK,CAACR,SAAP,CAA5C;MACD;IACF,CAVO;IAWRY,kBAAkB,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;MACrC,IAAII,IAAI,GAAG,CAAX;MACA,IAAKJ,MAAM,CAACC,OAAP,GAAiB,CAAtB,EAA0BG,IAAI,GAAGJ,MAAM,CAACC,OAAd;MAC1BF,KAAK,CAACN,YAAN,GAAqBJ,mBAAmB,CAACe,IAAD,CAAxC;IACD,CAfO;IAgBRC,WAAW,EAAGN,KAAD,IAAW;MACtBA,KAAK,CAACL,WAAN,GAAoBK,KAAK,CAACN,YAAN,CAAmBa,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBT,KAAK,CAACN,YAAN,CAAmBgB,MAA9C,CAAnB,CAApB;MACAC,OAAO,CAACC,GAAR,CAAYZ,KAAK,CAACN,YAAlB,EAAgCM,KAAK,CAACL,WAAtC;IACD;EAnBO;AAH8B,CAAD,CAAlC,C,CA0BP;;AACA,OAAO,MAAM;EAAEQ,aAAF;EAAiBJ,YAAjB;EAA+BK,kBAA/B;EAAmDE;AAAnD,IAAmEV,cAAc,CAACiB,OAAxF;AAEP,OAAO,MAAMpB,eAAe,GAAIO,KAAD,IAAWA,KAAK,CAACc,SAAN,CAAgBrB,eAAnD;AAEP,OAAO,MAAMsB,aAAa,GAAIf,KAAD,IAAWA,KAAK,CAACc,SAAN,CAAgBtB,SAAjD;AAEP,OAAO,MAAME,YAAY,GAAIM,KAAD,IAAWA,KAAK,CAACc,SAAN,CAAgBpB,YAAhD;AAEP,OAAO,MAAMsB,WAAW,GAAIhB,KAAD,IAAWA,KAAK,CAACc,SAAN,CAAgBnB,WAA/C;AAEP,eAAeC,cAAc,CAACqB,OAA9B"},"metadata":{},"sourceType":"module"}